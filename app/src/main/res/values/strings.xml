<resources>
    <string name="app_name">CppProject</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">About</string>
    <string name="menu_tools">Tools</string>
    <string name="menu_share">Share</string>
    <string name="menu_Logout">Logout</string>
    <string name="introduction">

      كثيرا منا من يجد صعوبة في كتابة   البرامج أو انه يعرف
        كل شيء وفاھم لكل مكونات تلك اللغة ولكن لا يعرف كيف يربط بين تلك المعلومات
        , كتلك التي تعرف مكونات كل أكلة وكيفية  تكوينھا  لكنھا  لا تجيد الطبخ اعلم أن الكثير
        منمن سيقرأ ھذه الأسطر يجد أنھا تطبق عليه ولا عجب فانا كنت كذلك يوما ما إذن فأين الحل ..؟
  عندما نُسال سؤال سنقوم بالبداية بتحليل
        السؤال ونحضر متطلباته تم نقوم بربط ھذه المتطلبات مع بعضھا ونكون برنامجا أي شيء شبيه بالخوارزمية لكل حل فعلى
     سبيل   المثال لو جاءنا سؤال يطلب فيه جمع عددين يدخلھما المستخدم فبداية التحليل من السؤال نفھم
     يدخل عددين  لذالك نحتاج إلى متغيرين كل متغير يمثل عدد معين من الذي سوف ندخله وبما انه

       قال يدخلھما المستخدم يجب أن نعمل دالة إدخال من شاشة التنفيذ إلى ھذان المتغيران تم يأتي
      بعدھما من متطلبات السؤال جمع أي لابد من وجود وتعريف متغير ثالث نخزن فيه نتيجة الجمع

      التي سوف نقوم بھا ثم نطبع ھذه النتيجة. ألان بعد تحليل المتطلبات نسلسل الخطوات على ورقة
      بشكل مشابه لكتابة البرنامج
</string>


    <string name="general">منطقة التعريفات العامة و استدعاء مكاتب البرنامج و في هذا المكان يتم تعريف المتغيرات العامة التي سيتم استخدامها في البرنامج بشكل عام اضافة الى استدعاء مكاتب البرنامج و تعريف الدوال ايضا
على سبيل المثال دالتي الطباعة و الادخال (cin , cout)
الموجودة ضمن مكتبة iostream.h
اما الجزء الاخر فهو دالة main
 و هذه الدالة الرئيسية التي يتم كتابة اكواد البرنامج فيها و من الجدير بالذكر انه يجب كتابة الفارزة المنقوطة بنهاية كل سطر برمجي لاعلام البرنامج بنهاية السطر , و هذا مخطط يوضح ما قد سبق ذكره
</string>


    <string name="variables">المتغيرات هي عبارة عن مواقع في الذاكرة يتم تخزين قيم معينة فيها قد تبقى ثابتة او تتغير اثناء تنفيذ البرنامج و اسماء
    المتغيرات تكون مفتوحة حسب رأي المبرمج يمكن ان يسميها اي اسم لكن على شرط الا يكون من الاسماء المحجوزة من قبل النظام مثل (if , while , switch)
    او اي اسم محجوز اخر من قبل المترجم و على الرغم من ان اسماء
    المتغيرات مفتوحة و لكن يجب ان تكون تسميتها منطقية فعلى سبيل المثال ان كان لديك متغير يدل على الوقت فيفضل ان تتم تسميته time
    لتكون قراءة الكود سهلة عند اعادة قرائته بعد فترة طويلة او التعديل عليه و هنا مجموعة من المتغيرات التي يتم استخدامها بكثرة
مع طريقة تعريف كل منها
</string>


    <string name="variables2">و يمكن تعريف اكثر من متغير بسطر واحد و ذلك بوضع فارزة بين اسم كل متغير و الاخر
و من الممكن ايضا اسناد قيمة متغير الى متغير اخر فتصبح بهذا الشكل </string>


    <string name="variables3">فهنا سيقوم المتغير second بأخذ قيمة المتغير first فسيخزن داخل المتغير second القيمة 51 </string>


    <string name="variables4">و الان قم بتعريف متغير من نوع double بأسم number و قم بأعطائه قيمة = 10 :- </string>

    <string name="iostream">و هي دالة تقوم بعرض نواتج العمليات امام المستخدم في شاشة التفيذ و بالشكل الاتي :- </string>

    <string name="iostream2">و الان فلنكتب برنامجنا الاول , و الذي سيكون عبارة عن طبع كلمة (Hi my name is momen shawkat)
على شاشة البرنامج فيكون الكود بالشكل الاتي :-</string>

    <string name="iostream3">و من الجدير بالملاحظة و الذكر ان اي جملة نصية مراد طبعها بدالة الطباعة يجب وضعها بين علامتي تنصيص  </string>

    <string name="iostream4">و ان اردنا وضع كل عبارة نصية بسطر منفرد نقوم بأستخدام endl بعد الجملة المراد طبعها في دالة الاخراج و بالشكل التالي :- </string>

    <string name="iostream5">و هناك بعض الرموز التي تستخدم في دوال الطباعة لترتيب شاشة الطباعة امام المستخدم
    بطرق مختلفة فمنها من يضيف فراغات و منها من يرتب عموديا و غيرها و هذا جدول بتلك الرموز </string>

    <string name="iostream6">مثال:- لو اردت طباعة متغير قمت باسناد قمية اليه اثناء تعريفه </string>

    <string name="iostream7"> سيقوم البرنامج بطباعة القيمة (3.14) فقط و هي القيمة المخزونة داخل المتغير (pi)</string>

    <string name="iostream8">و الان كيف ان اردنا طباعة القيمة بشكل مرتب اكثر و كالتالي </string>

    <string name="iostream9">الامر سهل جدا فقط ركز معي قليلا سنقوم بطباعة العبارة الاولى بشكل متسلسل مع القيمة و من ثم الرمز كالتالي:-  </string>

    <string name="iostream10">و الان يا صديقي حان وقت الاختبار , لا تخف سيكون اختبارا سهلا فقط ركز معي و انظر جيدا للكود الذي امامك</string>

    <string name="iostream11">حسنا , الان قم بأستخدام دالة الطباعة لطباعة هذا المتغير بالشكل الاتي:- </string>

    <string name="cin">تستخدم دالة الادخال لغرض ادخال معلومات من قبل المستخدم عن طريق شاشة التنفيذ و اسناد قيم الى
        المتغيرات المعرفة داخل البرنامج من خلال ادخال المستخدم لقيمتها لغرض معالجتها و القيام بالعمليات المطلوبة و بالشكل الاتي:-
    </string>

    <string name="cin2">المتغير (var) هو الذي سيقوم المستخدم بأدخال قيمته </string>

    <string name="cin3">و من الجدير بالذكر ان بامكانك ادخال قيمة اكثر من متغير بدالة واحدة فقط و كما يلي :-</string>

    <string name="cin4">مثال:- الان لو كان لدينا متغير (x) و من نوع (integer)
        و نريد ادخال قيمته عن طريق شاشة التنفيذ سيكون الكود بالشكل التالي </string>

    <string name="cin5">مثال(2):- لو اردنا ان يقوم المستخدم بأدخال حرف و يطبع الحرف امامه
        بين قوسين بمعنى ان المستخدم لو ادخل (a) سيعرض امامه بشاشة التنفيذ (a) سيكون الكود كالاتي</string>

    <string name="cin6">و الان قم انت بادخال قيمة لمتغيرين الاول (x) و الثاني (y) و بسطر واحد فقط </string>

    <string name="logic">تكتب العمليات الرياضية برمجيا بطريقة مماثلة لكتابتها رياضيا مع تغير طفيف بالرموز الرياضية
        , لاحظ هذا الجدول التوضيحي للعمليات و تمثيلها برمجيا و رياضيا </string>

    <string name="logic2">لاحظ ان التمثيل البرمجي مشابه تقريبا للتمثيل
        الرياضي مع ابدال بعض الرموز بما يكافئها ووضع فارزة منقوطة في نهاية التعبير </string>

    <string name="logic3">مثال:- لو كان لدينا متغيرين من نوع (integer) و كلاهما يحملان قيمة معينة يقوم بادخالها
        المستخدم من شاشة التنفيذ و المطلوب هو جمعهما و عرض الناتج , فسيكون الكود البرمجي بالشكل الاتي </string>

    <string name="logic4">توضيح للخطوات :-\n
    1-تعريف للمكتبة الخاصة بدوال الادخال و الاخراج \n
    2- كتابة الدالة الرئيسية (main) لتنفيذ الكود البرمجي \n
    3-تعريف المتغيرات بسطر واحد متغير للرقم الاول و متغير اخر ليحمل قيمة الرقم الثاني و متغير لتخزن فيه ناتج الجمع \n
    4-ادخال قيم المتغيرين اللذين سيتم جمعهما \n
    5-خزن ناتج الجمع داخل المتغير الثالث \n
    6-عرض الناتج على شاشة التنفيذ \n</string>


    <string name="logic5">هي رموز تستخدم لمعرفة العلاقة بين رقمين و يكون الناتج اما (true) او (false) و هذا جدول يوضح هذه الرموز </string>

    <string name="logic6">هي متغيرات تعرف داخل البرنامج
        بقيمة معينة ثم نغير قيمتها اثناء تنفيذ البرنامج كأن نجعلها تزداد بمقدار معين او تتناقص </string>

    <string name="logic7">لاحظ في هذا الكود عند طباعة قيمة المتغير (x) ستكون القيمة
        المطبوعة هي (1) و ليس (0) و هذا بسبب معامل الزيادة (++) الذي تم استعماله مع المتغير (x) </string>

    <string name="logic8">اما في هذه الحالة ستكون قيمة المتغير (x) هي (1-) و ذلك بسبب وجود معامل النقصان (--) </string>

    <string name="logic9"> ببساطة شديدة (++x) تعني قم بتنفيذ الخطوة الحالية على
        قيمتك السابقة ثم غير قيمتك بعد تنفيذ الخطوة الحالية على سبيل المثال قد تكون قيمة الزيادة هي (1) و قيمته
        في الخطوة السابقة (2) ينفذ الخطوة التي هو بها على انه (2) و عندما ينتقل الى الخطوة اللاحقة تصبح قيمته (3)</string>

    <string name="logic10">أما (x++) تعني قم بتغيير قيمتك السابقة اولا ثم نفذ الخطوة
        التي انت بها فلو اعدنا المثال السابق سيكون بهذا الشكل </string>

    <string name="logic11">و الامر سيان بالنسبة لمعامل النقصان فلا يوجد اختلاف من ناحية طريقة العمل و الهيكلية </string>

    <string name="tools">يتم استخدام العبارات المنطقية كثيرا في الادوات الشرطية و التي سيتم التطرق اليها فيما بعد بالتفصيل . \n
    بداية اود التنويه على نقاط مهمة:- \n
    1-ناتج اي عملية منطقية يكون اما(0) او (1). \n
    2-الرقم (1) يعبر عنه (true) و الرقم (0) يعبر عنه (false) في العمليات المنطقية. \n
    و فيما يلي جدول يوضح كل اداة مع رمزها البرمجي اضافة الى اسبقيتها من الاعلى الى الاقل. </string>

    <string name="tools2">جدول الحقيقة للادوات المنطقية:- </string>


    <string name="math">تستطيع استعمال الدوال الرياضية في (++c) عن طريق استدعاء المكتبة (math.h)
        و التي تساعدنا في حل العمليات الرياضية كأيجاد جيب او جيب تمام او المطلق و غيرها و هذا شرح لبعض دوالها :-</string>

    <string name="math2">1- دالة (sin) تستخدم هذه الدالة لايجاد جيب الزاوية بنظام (rad) كالتالي :-</string>

    <string name="math3">2-الدالة (cos) تستخدم لأيجاد جيب تمام الزاوية بنظام (rad) و طريقة كتابتها مشابهه لدالة (sin) كالتالي :-</string>

    <string name="math4">3- دالة (pow) تستخدم هذه الدالة لايجاد قيمة رقم مرفوع
        الى اس معين , مثلا لو ردنا كتابة هذا الرقم(3^9) بلغة (++c) فسيكون بالشكل الاتي:- </string>

    <string name="math5">حيث الرقم الاول من اليسار (9) و الرقم الثاني (3) هو الاس. </string>

    <string name="math6">4- دالة (abs) هي دالة ايجاد المطلق للرقم </string>

    <string name="math7">5- دالة (sqrt) هي دالة تستخدم لايجاد الجذر التربيعي .</string>

    <string name="math8">الان قم بتعريف متغير من نوع (integer) بأسم (num)
        ثم قم يأيجاد الجذر التربيعي للرقم (16) و قم بخزنه بالمتغير (num) بسطر برمجي واحد </string>

    <string name="If">هي عبارة او جملة لا ينفذ ما في داخلها (statement) الا بتحقق الشرط الموجود بداخل القوسين و هو (condition)
        اي يجب ان تكون نتيجة مقارنة الشرط هي (true) حتى ينفذ ما بين قوسي العبارة الشرطية </string>

    <string name="If2">- اذا لم يحقق الشرط (condition) اي كانت نتيجة المقارنة هي (false)
        سيتم تجاوز جميع الخطوات الموجودة بين قوسي العبارة الشرطية (if) و لن يتم تنفيذها.</string>

    <string name="If3">- و اذا تحقق الشرط (condition)
        اي كانت نتيجة المقارنة هي (true) ينفذ الخطوات الموجودة بين قوسي العبارة الشرطية (if) بشكل اعتيادي.</string>

    <string name="If4">ملاحظة:- اذا لم نضع اقواس خلف العبارة الشرطية سيقوم بتنفيذ السطر الذي يليها فقط , اما اذا وضعنا اقواس خلفها فكل الذي بين القوسين يكون تابع للعبارة الشرطية. </string>

    <string name="If5">مثال:- لنكتب برنامج يقوم بأستلام الرقم من المستخدم و اذا كانت قيمته اكبر من (5)
        يقوم بطباعة عبارة (the number is greater than 5 ) و ان كان خلاف ذلك ينهي البرنامج بدون اتخاذ اي اجراء.</string>

    <string name="If6">خطوات التنفيذ:- \n
    1- تعريف المتغير (number) و الذي سنطبق الشرط عليه.\n
    2- استلام الرقم من المستخدم و حفظه في المتغير الذي يتم تعريفه.\n
    3- اختبار الشرط في داخل (if) كما موضح اعلاه.\n
    4- كتابة عبارة الطباعه بعد الجملة الشرطية مباشرة و التي سيتم تنفيذها في حالة كان الشرط صحيحا . </string>

    <string name="If7">هي عبارة شرطية مكونة من جزئين من الاكواد البرمجية
        ان تم تحقيق الشرط يقوم بتنفيذ (statement 1) و ان لم ينفذ الشرط يقوم البرنامج بتنفيذ (statement 2) كما موضح ادناه .</string>

    <string name="If8">مثال:- لنقم بأعادة كتابة البرنامج السابق و لكن هذه المرة بأستعمال (if-else)</string>

    <string name="If9">توضيح:- في هذه الحالة ان لم يكن الشرط صحيحا سيقوم البرنامج بطباعة العبارة (the number is smaller than 5)</string>

    <string name="If10">هي عبارة عن مجموعة من الشروط التي
        يتم التحقق منها اثناء وقت التنفيذ في حال لم يتحقق الشرط الاول ينتقل الى (else if) الثانية و اذا لم تتحقق
        ينتقل الى الثالثة حتى يصل اخيرا الى الشرط الذي يتحقق و اذا تحقق شرط واحد منها سوف ينفذ ما في داخلها و يهمل البقية </string>

    <string name="If11">مثال:- و الان لننفذ البرنامج السابق نفسه و لكن بأستعمال (else if)</string>


    <string name="switch1"> هي مجموعة عبارات شرطية (case) و يقارن القيمة عند كل
        (case) مع المتغير في (switch) و يتم التحقق من الشروط وقت التنفيذ فأذا لم يتحقق
        الشرط الاول ينتقل الى (case) الثانية فأذا لم يتحقق الشرط الثاني ينتقل الى
        (case) الثالثة حتى اخيرا يصل الى الشرط الذي يتحقق و اذا تحقق واحد من (case) سوف ينفذ ما في داخلها و يهمل
        البقية و اذا لم ينفذ اي واحد منهن سوف يتجه لينفذ ما في داخل (default) , اي ان طريقة عملها مشابهه جدا لعمل (if-else)</string>

    <string name="switch2">مثال:- الان لنكتب برنامج بسيط يقوم بأستقبال قيمة من المستخدم و ان كانت هذه القيمة تساوي (1) يقوم بطباعة كلمة (one)
      و هكذا الى رقم (3) و ان ادخل اي قيمة اخرى نطبع له الرسالة التالية (Insert number from 1 to 3 ) </string>


    <string name="switch3">توضيح:-\n 1-قمنا بتعريف متغير من نوع (integer) و بأسم (number) لخزن القيمة المستقبلة من المستخدم \n
    2- استقبال القيمة بأستعمال اداة الادخال (cin) كما موضح في الكود \n
    3- استعملنا الاداة (switch) و حددنا المتغير الذي سيتم التحقق عليه \n
    4-الاداة (case) و التي تحتوي على الشرط الذي سيتم مطابقته مع قيمة المتغير \n
    5-الاداة (default) و التي سيتم تنفيذ ما في داخلها في حالة لم يتم تنفيذ اي شرط</string>

    <string name="loops">في الدروس السابقة علمنا
        ان البرنامج يبدأ بالتنفيذ خطوة بخطوة بدون تكرار الى ان يصل الى نهاية البرنامج و في حال وجود (if)
        الشرطية في البرنامج قد يكون بسببها هناك استثناء بعض الخطوات من التنفيذ ان لم يتحقق الشرط , و السؤال هنا ماذا لو
        اردنا تكرار خطوة او اكثر من خطوة لأكثر من مرة لسبب ما كيف نفعل هذا ؟ , هذا هو ببساطة مبدأ عمل الدوال
        التكرارية و منها (for) هي عبارة تكرارية تستخدم لتكرار خطوة او اكثر لعدد معين من المرات يحددها المبرمج , و شكلها العام </string>

    <string name="loops2">اولا:- (initializing) هي القيمة البدائية المعطاة للمتغير التي منها سيبدأ العد مثلا(i=0) \n
    ثانيا:-(boolean_expression) هو شرط التوقف الذي عندما تصبح قيمة المتغير غير محققة لشرط التوقف سوف يخرج من عبارة (for)\n
    ثالثا:- (update) هي مقدار الزيادة او النقصان في قيمة المتغير في كل دورة \n
    رابعا:- (statement) و هي الخطوات البرمجية التي سيتم تنفيذها لعدد من المرات . </string>

    <string name="loops3">كيف تعمل عبارة (for) التكرارية ....؟</string>

    <string name="loops4">ان المتغير يبدأ بقيمة بدائية (initializing) و يستمر بالزيادة
        او النقصان حسب (update) اي قد يزداد او ينقص بمقدار واحد او اكثر من واحد
        و متى ما اصبحت قيمة المتغير غير محققة للشرط (boolean_expression) يخرج من العبارة التكرارية الى
        الخطوات البرمجية التي تليه و اذا كانت محققة للشرط ينفذ الخطوات البرمجية التي داخل العبارة التكرارية .</string>

    <string name="loops5">مثال:- لنكتب برنامج يقوم بطباعة الارقام من (0) الى (4) على شاشة التنفيذ </string>

    <string name="loops6">1- قمنا بتعريف متغير من نوع (integer) و اعطيناه القيمة البدائية و هي (0) بما اننا نريد البدء من الصفر \n
    2- بما اننا نريد الوصول الى الرقم (4) فقمنا بأعطائه الشرط بأن يكون العداد (i) اصغر من (5) \n
    3- بما اننا نريد البرنامج ان يقوم بخمس عدات من الصفر للأربعة فمقدار الزيادة سيكون بقيمة واحدة فقط (++i)</string>

    <string name="loops7">مثال:- الان ماذا لو اردنا ان نقوم بطباعة الارقام من (4) الى (0) أي بشكل عكسي</string>

    <string name="loops8">الأمر مشابه تماما للمثال السابق من ناحية طريقة العمل و لكن في هذا المثال سيبدأ العد من الرقم (4) نزولا الى الصفر </string>

    <string name="while1">هي عبارة تكرارية تستخدم لتكرار الخطوات البرمجية المحصورة بين قوسيها لعدد من المرات تكون مشابهه تماما لعبارة التكرار (for) و تستطيع
        المقارنة بين هيكلية هاتان العبارتان التكراريتان و سوف تجد الشبه بينهما </string>

    <string name="while2">و اما بالنسبة لطريقة العمل فهي مشابهه تماما
        لطريقة عمل العبارة التكرارية (for) و لكن الاختلاف فقط في الشكل العام للعبارة التكرارية </string>


    <string name="while3">مثال:- لنكتب برنامج يقوم بطباعة
        الارقام من (0) الى (4) على شاشة التنفيذ , نفس المثال في العبارة (for) لكن هذه المره بأستعمال (while)</string>

    <string name="dowhile">هي عبارة تكرارية تستخدم لتكرار الخطوات البرمجية
        المحصورة بين قوسيها لعدد من المرات و تكون مشابهه جدا لعبارة التكرار (while) فقط الاختلاف بينهما ان عبارة
        (do-while) تنفذ ما بين قوسيها ثم تتحقق من الشرط اما عبارة (while) فأنها تتحقق من الشرط ثم تنفذ ما بين قوسيها </string>

    <string name="dowhile2">مثال:- لنكتب برنامج يقوم بطباعة
        الارقام من (0) الى (4) على شاشة التنفيذ , نفس المثال في العبارة (for) لكن هذه المره بأستعمال (do-while)</string>

    <string name="array">قبل ان نتحدث عن المصفوفات علمنا ان المتغيرات تحجز مكان في الذاكرة تخزن فيه قيمة المتغير اذا فما
        فرق المصفوفات عن المتغيرات , المصفوفات هي مجموعة خلايا متتالية في الذاكرة تحجز لغرض خزن معلومات معينة
        في داخلها كأن نخزن في داخلها أرقام او أحرف و تبقى هذه القيم مخزنة داخل المصفوفة حتى نغلق البرنامج
        و يجب علينا تحديد عدد المواقع التي نحتاجها في بداية البرنامج حتى يحجزها المترجم للمصفوفة و لا يخزن قيم اخرى
        في داخلها و تبقى محجوزة فقط لعناصر المصفوفة و يكون تحديد عدد العناصر و تعريف المصفوفة و نوعها بالشكل التالي .</string>

    <string name="array2">اولا نقوم بتحديد نوع المصفوفة ثم نقوم بتحديد اسم المصفوفة و بين
        قوسين مربعين نحدد عدد الخلايا التي سيتم حجزها من قبل المترجم كما موضح بالمثال اعلاه . </string>

    <string name="array3">و الان كيف لو اردنا الوصول الى موقع معين في داخل المصفوفة و خزن قيمة بداخله ؟ </string>

    <string name="array4">أن عنونة عناصر المجموعة تبدأ من الصفر و هو اول موقع في المصفوفة فلو اردنا خزن قيمة في الموقع
        الاول سنكتب اسم المصفوفة ثم بين قوسين مربعين القيمة (0) و ندخل القيمة التي نريدها بالشكل التالي .</string>

    <string name="array5">كيف نطبع قيمة محدده في داخل المصفوفة ؟</string>

    <string name="array6">لو اردنا طباعة القيمة في الموقع الثاني سيكون الكود بالشكل التالي ...</string>

    <string name="array7">ملاحظة:- ان تسلسل العناصر في المصفوفة يبدأ من
        الصفر كما لاحظت فعليه لو كانت لدينا مصفوفة حجمها (10) فأن اول عنصر تسلسله هو (0) و الاخير سيكون (9)</string>

    <string name="array8">و من الممكن ايضا ادخال القيم للمصفوفة مباشرة اثناء تعريفها و كالتالي .</string>

    <string name="array9">مثال:- مصفوفة احادية لادخال (6) عناصر و طبعها على شاشة التنفيذ </string>

    <string name="array10">بمثل هذا النوع من الامثلة ليس
        من المنطقي ادخال كل قيمة على حدى الامر من الممكن ان يكون سهلا في هذا المثال بسبب ان حجم المصفوفة (6)
        ولكن فرضا لو كانت لدينا مصفوفة حجمها (100) هل سنقوم بأدخال هذه العناصر واحدة تلو الاخرى ؟ بالتأكيد لا ,
        اذن ما الحل ؟ الحل هو بأستعمال الجمل التكرارية التي سبق
        و قمنا بدراستها و على وجه الخصوص سنقوم بأستعمال (for) و كما موضح في المثال الاتي .</string>

    <string name="array11">توضيح:- \n
    - قمنا بتعريف المصفوفة و تحديد حجمها \n
    - كتابة العبارة التكرارية (for) و اعطاء قيمة اولية للعداد و هي (0) ثم حددنا شرط الاستمرارية على ان يكون العداد اقل من (6) و الذي هو حجم المصفوفة \n
    - الزيادة بمقدار (1) في كل مرة \n
    - ادخال القيمة عن طريق شاشة التنفيذ بأستعمال (cin) و التي سيتم ادخالها في داخل المصفوفة \n
    - ادخال القيم سيكون عن طريق العداد (i) و الذي سيكون في اول مرة صفر فسيتم ادخال القيمة في الموقع الاول ثم تكون قيمة (i) واحد فسيتم ادخال القيمة في الموقع الثاني و هكذا لحين الوصول الى اخر قيمة و هي (5)\n
    - و أما بالنسبة لعملية الطباعة فستسير بنفس الخطوات تماما \n
    </string>

    <string name="array2d">لا تختلف المصفوفات الثنائية كثيرا عن المصفوفة احادية الابعاد تختلف فقط في
        العنونة فبدلا من ان يكون لها (index) واحد سيكون لها اثنان الاول يعبر عن الصفوف (rows) و الثاني يعبر عن الاعمدة (columns) .</string>

    <string name="array2d2">مثال:- مصفوفة مكونة من صفين و ثلاث اعمدة .</string>

    <string name="array2d3">حيث ان القوس الاول يعبر عن الصفوف و الثاني يعبر عن الاعمدة .</string>

    <string name="array2d4">مثال:- لو اردنا ادخال القيمة (80) في الصف الثاني و العامود الاول تكون بالشكل التالي</string>

    <string name="array2d5">مثال:- لو اردنا طباعة القيمة الموجودة في الصف الاول و العامود الاول .</string>

    <string name="array2d6">أدخال القيم للمصفوفة يكون بأستعمال (for) و لكن في هذه الحالة نقوم بأستعمال
        جمل تكرارية متداخلة اولهما تعبر عن الصفوف و الاخرى تعبر عن الاعمدة و كما موضح ادناه</string>

    <string name="array2d7">أما بالنسبة لعملية الطباعة ستكون بنفس الشكل تماما فقط نستبدل دالة
        الادخال بدالة الطباعة فهذه الصيغة ثابتة الشيء الوحيد الذي يتغير هو نوع المصفوفة و حجمها </string>

    <string name="functions">تطرقنا فيما مضى على عدد من الدوال الخاصة بلغة (++c) و تعلمنا طريقة استخدامها و منها دالة (pow) التي
        تستخدم لايجاد قيمة رقم مرفوع الى قوى , و هذه الدوال كلها مصممة من قبل مصممي لغة
        (++c) لكي يسهل العمل على المبرمجين فبدلا من ان يكتب المبرمج عدد من الاسطر البرمجية
        لايجاد قيمة رقم مرفوع لقوة معينة يقوم بأستعمال هذه الدالة التي
        ستوفر عليه الكثير من الوقت و من فوائد الدوال هو تقليل الاسطر البرمجية و منع تكرار الاكواد لاكثر من مرة ايضا نستطيع بناء
        دوال بنفسنا لكي نمنع تكرار اسطر برمجية معينة و نزيد من سهولة الكود البرمجي و امكانية قرائته من قبل المبرمجين الاخرين . </string>

    <string name="functions2">الهيكلية العامة لبناء الدوال:-</string>

    <string name="functions3">اولا:- (type) هو نوع القيمة التي سترجعها الدالة بعد ان تنتهي من عملها لان الدوال تكون على نوعين \n
    الاولى تعيد قيمة بعد استدعائها و تكون بالشكل التالي و يجب ان تحتوي على (return) لتعيد قيمة للبرنامج </string>

    <string name="functions4">و بما انها تعيد قيمة فيجب خزن هذه القيمة بمتغير من نفس نوع الدالة اي لو كان نوع الدالة
        هو (integer) فيجب ان يكون نوع المتغير (result) هو (integer) لتخزن فيه القيمة المرجعة من تنفيذ الدالة .</string>

    <string name="functions5">أما النوع الثاني لا تعيد اي قيمة للبرنامج , تستدعى لتنفذ ما في داخلها و ينتهي كل شيء و لا تحتوي في
        داخلها على (return) لأنها لا تعيد اي قيمة و طريقة استدعائها في البرنامج فقط نكتب اسم الدالة بالشكل التالي .</string>

    <string name="functions6">ثانيا:- (name) هو اسم الدالة و يمكن ان يكون اي اسم
        لكن للوضوح اجعل اسم الدالة يدل على عملها فمثلا لو قمت ببناء دالة لجمع رقمين قم بتسميتها (sum) ليكون واضحا .</string>

    <string name="functions7">ثالثا:- (parameters) هي متغيرات يتم ارسالها الى
        الدالة لنمثلها داخل الدالة لغرض تنفيذ العمل المطلوب و تقوم الدالة بأستقبال المتغيرات المرسلة حسب الترتيب . </string>

    <string name="functions8">مثال:- لنكتب برنامج يقوم بجمع رقمين لكن باستعمال الدوال .</string>

    <string name="functions9">توضيح:- \n
    اولا:- قمنا بتعريف المتغيرات التي سيتم جمعها و المتغير الذي سيحتوي على ناتج جمعهما . \n
    ثانيا:- ادخال القيم للمتغيرات بأستعمال دالة الادخال و عن طريق شاشة التنفيذ . \n
    ثالثا:- استدعاء الدالة بأسمها و تمرير المتغيرين الذين قمنا بأدخال قيمتها بداخل الدالة و من ثم خزن القيمة المرجعة من تنفيذ الدالة داخل المتغير (result) . \n
   رابعا:- عند وصول البرنامج الى الخطوة التي تم استدعاء الدالة فيها سيتوقف و من ثم ينتقل الى تنفيذ الاكواد البرمجية التي داخل الدالة التي قمنا بكتابتها . \n
   خامسا:-البدء بتنفيذ الاكواد التي بداخل الدالة (sum) و هي عبارة عن ثلاث متغيرات (var1 , var2) سيمثلان القيم التي تم ارسالها مسبقا من الدالة الرئيسية و اللذان سيتم جمعهما و خزن الناتج بداخل المتغير (result) . \n
     سابعا:- العودة الى الدالة الرئيسية بعد اتمام تنفيذ الدالة (sum) و طباعة القيمة المستلمة في داخل المتغير (result) . \n
    </string>

    <string name="functions10">و هي الدوال التي لا تحتوي على قيمة مرجعة الى البرنامج اي ننفذ ما في داخلها و لا تعيد اي قيمة الى البرنامج قد تستقبل قيم و لكنها لا تعيد اي قيمة . </string>

    <string name="functions11">مثال:- برنامج يقوم بطباعة العبارة (hello world) . </string>

    <string name="functions12">ملاحظة:- (void) تعني بأن هذه الدالة ليس لها نوع محدد و انها لا تقوم بأرجاع اي قيمة .</string>

    <string name="str">هي مجموعة بيانات (متغيرات) بأنواع مختلفة تحت اسم واحد تستخدم في حال
        لدينا عدة مكونات او اشخاص يشتركون في معلومات معينة متشابهه فتستخدم لجمع تعاريف لعدة
        اشخاص في سجل واحد يشتركون جميعا بنفس المعلومات , حيث نشتق هذه المعلومات لأي شخص نريده و تكون بالشكل التالي . </string>

    <string name="str2">اولا:- (Structures_Name) هو اسم السجل و يمكن ان يكون اي اسم حسب اختيار المبرمج .\n
     ثانيا:-(Type) هو نوع المتغير داخل السجل و يمكن وضع انواع مختلفة من المتغيرات داخل سجل واحد و يكون عدد نعريف المتغيرات غير محدود . \n
    ثالثا:-(ObjectName) هو اسم الكائن المشتق من السجل و من الممكن ان يكون اي اسم , و يمكن اشتقاق عدد غير محدد من الكائنات من سجل واحد فقط نضع فارزة بين كل كائن و الاخر , و نبدأ بتعريف هذه الكائنات بعد اغلاق قوس السجل .\n
    و يتم وضع السجل بعد تعريف المكاتب مباشرة و ليس في داخل الدالة الرئيسية (main) .</string>

    <string name="str3">مثال:- ابسط مثال على السجل هي سيارة (Car) لها
        رقم لوحة و موديل و الشركة المصنعة و اسم السيارة نفسها , كتابة السجل تكون كالتالي </string>

    <string name="str4">نلاحظ ان رقم السيارة و موديلها تم
        تعريفهما من نوع (integer) لانهما قيمتان رقميتان , اما اسم الشركة و اسم السيارة فتم تعريفهما
        من نوع (string) لانهما قيمتان نصيتان , و نلاحظ اننا اشتقينا من السجل سيارة محمد (mohammedCar) و سيارة
        علي (aliCar) . الان نريد ادخال البيانات للمتغيرات الموجودة في داخل السجل , الادخال سيكون بالشكل التالي . </string>

    <string name="str5">ملاحظة:- بالنسبة لعملية طباعة البيانات فهي مشابهه لعملية الادخال و لكن بأستعمال دالة الطباعة (cout) . </string>

    <string name="oop">السؤال الذي حير الكثير من المبرمجين حديثي الدخول لعالم البرمجة الكائنية او
البرمجة بشكل عام لما علي استخدام الأساليب المختلفة في البرمجة ؟
نستخدم هذه الأساليب لنجعل الاكواد اكثر تنظيم واكثر فهم واختصار في الكتابة
وكذلك هي لغة تفاهم بين فريق العمل فلا يعمل أي فريق علي مشروع الا
ويستخدمون هذا الأسلوب . اذا هل انت تحتاج اليه وانت تعرف ان البرامج التي تقوم
بعملها لا تتجاوز 100 اسطر فقط ؟؟
الإجابة هي نعم . فانت اذا حاولت ان تقوم بالتطوير في البرنامج لكي يقوم بالعمل
بطريقة اسرع او ان يتواجد به اكثر من حل لأي مشكلة تواجهه التي صمم من اجل
حلها فانت اذا كنت لا تستخدم البرمجة الكائنية فستحتاج الي إعادة كتابة البرنامج
حتي يتماشى مع الرؤية الجديدة او الحل فلماذا هذا العناء وانت يمكنك ان تقوم ببناء
برنامج مميز تقوم بتطوير كل جزئية به منفصلة عن اختها هكذا تقوم بعمل برنامج
اكثر ثبات ودقة .</string>

    <string name="oop2">من اكثر الأسئلة الشائعة عند تقدمك لوظيفة مبرمج داخل أي شركة تتحدث معك عن مفهوم
البرمجة الكائنية وعن حل المشكلات ولكن دعونا من جزئية حل المشكلات فلدينا كتاب كامل
يتحدث عن هذه الفقرة ولكن الان الشركات تستخدم احدث أنظمة التشغيل واحدث الأدوات
البرمجية وبيئات التطوير حتي تسهل عليك البرمجة ولكن يجب ان تضمن انها حين تجعلك من
موظفيها انك مؤهلا لاستخدام هذه التقنيات وهي تعتمد اعتماد كامل علي أسلوب البرمجة
الموجه.
اما بالنسبة للفريق فكما ذكرنا من قبل فهي لغة التفاهم الخاصة بالمبرمجين فانت لن تقوم
ببرمجة برنامج كامل بنفسك فكيف نقوم بجعل كل شخص من الفريق يعمل علي الجزئية
الخاصة به وهو عن طريق البرمجة الموجه فيمكن ان نقوم بجمع وتركيب جميع الاكواد التي
انشاها الفريق ومن ثم تجربتها وتحسين أدائها الخ .. كذلك قد وفرنا الكثير من الوقت والجهد
واصبح البرنامج سهل القراءة والفهم ويمكن التعديل عليه بسهولة .</string>

    <string name="oop3">1-الفئات (class) \n
2-التغليف (encapsulation)\n
3-الوراثة (Inheritance) \n
4-تعدد الاوجه (Polymorphism)</string>

    <string name="classes"> هو عبارة عن قالب تقوم بتخزين به مجموعة من الأوامر والتي تنقسم الي قسمين  خصائص و سلوكيات و لكل كلاس اسم حتي يسهل الوصول اليه او معرفة وظيفته من قبل ان تستخدمه.</string>

    <string name="classes2">لماذا احتاج للكلاس ؟ </string>

    <string name="classes3">حتي أقوم بتجميع الأوامر البرمجية وتصنفيها حيث يمكن ان تجعل الاكواد الخاصة بالشبكات في كلاس و تسميه باسم محدد وكذلك الاكواد الخاصة بالجرافيك والاكواد  الخاصة باتصال قواعد البيانات .</string>

    <string name="classes4">ما هو (object) ؟ </string>

    <string name="classes5">الكائن هو نسخة او صورة  من الكلاس تصنع داخل الذاكرة بحيث ان الكائن يوجد  لديه نفس الخصائص والسلوكيات بداخل الكلاس . </string>

    <string name="classes6"> لماذا أقوم بعمل كائن ؟</string>

    <string name="classes7"> حتي أقوم باستدعاء جميع الخصائص والسلوكيات التي
        قمت بتعريفها في الكلاس .\n مثال : اذا كان لديك ورقة تريد ان تضع بها
        بياناتك وأرسالها الي بعض الشركات حتي يتعرفوا علي ما هي صفاتك والوظائف
        التي تقدر ان تقوم بها ولكن مع مراعات ان تقوم بتغير أولويات الوظائف علي حسب
        كل شركة واحتياجاتها  فيجب عليك ان تقوم بتصوير هذه الورقة او طباعة اكثر من نسخة
        ولكنك لن تقوم بكتابتها مرة اخري  بل تقوم فقط بعمل منها صورة .. اذا هذا هو الكائن . </string>

    <string name="classes8"> قوانين كتابة الكائن :-</string>

    <string name="classes9"> لكل كائن اسم خاص به. \n
    الصفات - لكل كائن صفات مخزنة. \n
    السلوكيات - لكل كائن وظائف يقوم بتنفيذها.</string>

    <string name="classes10">ماذا نقصد بمصطلح (methods) ؟ </string>

    <string name="classes11">هي مجموعة من الوظائف تكتب داخل الكلاس تضم بعض البيانات الخاصة بها
        وتستخدم بعض البيانات العامة التابعة للكلاس يمكن ان تقوم بإرسال اليها بعض
        البيانات لكي تقوم بعمل معالجة و تقوم بإرجاع قيمة او نتيجة  هذه العملية.</string>

    <string name="classes12">1- لها اسم محدد و لا يمكن استخدام هذا الاسم مرة اخرى لا بأستعمال بعض الطرق المختلفة (overloading , overriding)\n
    2- يجب تحديد نوع البيانات التي سيتم معالجتها. \n
    3- لا يمكن استدعائها الا من خلال عمل كائن من كلاس او استخدام اسم الكلاس نفسه.</string>

    <string name="classes13">حيث (nameOfClass) يمثل الاسم الخاص به
        و الذي يتم اختياره من قبل المبرمج بحرية كاملة دون الالتزام بأسماء معينة.\n
    يحتوي (class) على العديد من المتغيرات و الدوال التي تستطيع استعمالها بعد تعريف متغير من نوع (class)
        الذي قمت بأنشائه او عن طريق مناداته مباشرة بأستعمال اسمه ثم الوصول الى البيانات التي بداخله </string>

    <string name="encapsulation">هو تجميع جميع الصفات والسلوكيات داخل كلاس.\n
و عمل تحكم علي ظهور المعلومات والسلوكيات والتحكم في الوصل اليها .\n
فهو يقوم علي عمل إخفاء لبعض المعلومات او التحكم في طريقة معالجتها للبينات
المدخلة حتي لا تحدث أخطاء بين المبرمجين الذين يقوموا بتطوير كلاس معين .</string>

    <string name="encapsulation2">أي ببساطة تامة هي عملية تغليف للبيانات
        و حمايتها من اي محاولة وصول للمتغيرات من خارج (class) نفسه الذي تم انشاء المتغيرات في داخله.</string>

    <string name="encapsulation3">نلاحظ هنا ان المتغيرات من نوع (private) لا يمكن التعامل معها من الدالة الرئيسية
        حتى ولو تم تعريف متغير من نوع هذا الكلاس الطريقة الوحيدة للوصول لها هو من داخل الكلاس نفسه .</string>

    <string name="inheritance">هي السماح بصنع كلاس جديد بواسطة كلاس قديم موجود بالفعل
تقوم بوراثة كل شيء بداخل الكلاس القديم من خصائص وسلوكيات بمراعاة إمكانية
الوصول الي بعض الخصائص والسلوكيات التي يحتويها الكلاس القديم
ولكن يجب ان يكون داخل الكلاس الجديد ما يميزه بحيث لا يقوم باستعمال نفس
الاسم ويكون بداخله بعض الخصائص والسلوكيات الخاصة به
حينما يكون لديك كلاس به بعض خصائص وسلوكيات التي يمكن ان تكرر في
الاكواد فيمكنك ان تقوم باستغلال هذا الكلاس بحيث تقوم بأخذ كل ما بداخله من غير
ان تكرر كتابته مرة اخري وان تضيف ما تريده في الكلاس الجديد مثال :-</string>

    <string name="inheritance2">لدينا كلاس لأنواع الحيوانات اسمه (Animal) و يوجد بداخله عدة صفات مثل الاسم و النوع و الصوت و يوجد لديه بعض السلوكيات مثل (Walk , Sit ,Sound , Stop)
    كل هذه السلوكيات والخصائص توجد في جميع الحيوانات فلا يوجد حيوان بلا
صوت او اسم . المشكلة هنا عندما تقوم بتخصيص نوع محدد من الحيوانات فاذا
تحتاج ان تقوم بعمل كلاس يعبر عن الكلاب مثلا فسوف تقوم بنسخ ولصق كل هذه
الصفات والسلوكيات وإعادة كتابتها مرة اخري . فعندما تشعر بانه يوجد تكرار داخل
الكود الخاص بك فاعلم انك لست علي الطريق الصحيح .فما الحل ؟؟
هو ان تقوم بعمل كلاس جديد وتقوم بوراثة الصفات التي توجد في الكلاس القديم
الذي قد انشاته وهكذا قد نجحنا في حل مشكلة تكرار الكود واصبح لديك بعض
التنظيم واختلاف مستوي كفاءة البرنامج .</string>

    <string name="inheritance3">نلاحظ هنا ان الكلاس الثاني
        (typist) قام بوراثة جميع الصفات التي في داخل الكلاس الاب (staff)
        و بذلك فهو يحتوي على جميع المتغيرات و الدوال التي تم تعريفها
        في الكلاس الاب بالأضافة الى المتغيرات و الدوال التي تم تعريفها بالكلاس نفسه (الابن) </string>

    <string name="inheritance4">ملاحظة:- في لغة (++C) يمكن
        الوراثة من اي عدد من الكلاسات فلا يشترط ان تكون الوراثة من كلاس واحد فقط و ذلك
        بوضع فارزة بعد اسم الكلاس الاول و من ثم كتابة اسم الكلاس الثاني المراد الوراثة منه. </string>

    <string name="polymorphism">هو ان تقوم بتكرار دالة واحدة بنفس الاسم داخل كلاس واحد .
اذا سوف يأتي احد الان ويقول كيف اكرر الدالة اكثر من مرة بنفس الاسم سوف يقوم
المترجم بإخراج أخطاء لان الاسم قد تكرر وبماذا استفيد من هذا التكرار .\n
أولا : يوجد قواعد محددة لتكرار الدالة بنفس الاسم وهذا ما يجعل إمكانية التكرار
مسموحة بالنسبة للمترجم .\n
ثانيا : انت لا تقوم بتكرار الاسم فقط ولكن تريد ان تقوم بتكرار الاسم لعمل كذا حدث
ولكن بنفس الدالة وهذا ما سوف نقوم بتوضيحه الان .</string>

    <string name="polymorphism2">مثال : اذا كان لديك دالة تجمع رقمين واسمها (ADD)
        و تريد جمع ثلاث ارقام في المرة الأخرى فيجب عليك عمل دالة اخرى وتوجد لها
اسم اخر وقد تريد جمع رقمين بصيغة عشرية فيجب ان تقوم بعمل دالة اخرى وبأسم
اخر ولكن بهذا الأسلوب سوف يكون لديك الكثير من الدوال تقوم بنفس العمل تقريبا
ولكن بأسماء مختلفة وهكذا يصعب عليك حفظ كل هذه الدوال التي صنعتها فما بالك
بالمكاتب التي لم تصنعها ولهذا قد وفرت لنا لغات البرمجة هذه الميزة حتي لا نقع في
الكثير من المشاكل .</string>

    <string name="polymorphism3">قواعد الكتابة :-\n
    1- يجب ان تكون المعاملات (parameters) مختفلة بالعدد او بالنوع .\n
    2- تغيير نوع رجوع البيانات .</string>

    <string name="polymorphism4">لاحظ هنا ان جميع الدوال تحمل نفس الاسم تماما و لكن كل منها تقوم بوظيفة مختلفة
        عن الدالة الاخرى و ذلك اعتمادا على المعاملات (parameters) التي سيتم ارسالها للدالة فأن تم ارسال متغير من
        نوع (int) سيقوم بتنفيذ الدالة الاولى و ان تم ارسال متغير من نوع (float) سيقوم بتنفيذ الدالة الثانية و هكذا .</string>

    <string name="access">هي مجموعة من كلمات رئيسية داخل لغة البرمجة تعبر عن تحديد إمكانية الوصول
الى مكونات الكلاس فمنها :-</string>

    <string name="access2">1-العبارة (public) :-هي كلمة رئيسية في اللغة تقوم بإظهار المكونات الرئيسية للكلاس
لجميع النطاقات البرمجية الأخرى حيث يمكن الوصول الى مكونات الكلاس من اي كلاس اخر او من داخل الدالة الرئيسية . \n
    2- العبارة (private) :- هي كلمة رئيسية في اللغة تقوم بإخفاء جميع المكونات داخل
الكلاس حتي لا يستطيع احد تغيير القيم الداخلية او التلاعب بها فلا يمكن الوصول للمكونات الا من داخل الكلاس نفسه الذي تم تعريف المتغيرات فيه . \n
    3- العبارة (protected) :- هي كلمة رئيسية في اللغة تقوم بإخفاء المكونات في الكلاس من جميع الكلاسات الاخرى و حتى الدالة الرئيسية
الا للكلاس الذي قام بوراثة هذا الكلاس .</string>

</resources>
